<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ベイズ on 調べ物まとめ</title>
    <link>https://pop-ketle.github.io/survey/tags/%E3%83%99%E3%82%A4%E3%82%BA/</link>
    <description>Recent content in ベイズ on 調べ物まとめ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 22 Oct 2020 16:09:01 +0900</lastBuildDate><atom:link href="https://pop-ketle.github.io/survey/tags/%E3%83%99%E3%82%A4%E3%82%BA/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ベイジアンネットワークを用いたWebレコメンデーションシステムの開発</title>
      <link>https://pop-ketle.github.io/survey/papers/%E3%83%99%E3%82%A4%E3%82%B8%E3%82%A2%E3%83%B3%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%82%92%E7%94%A8%E3%81%84%E3%81%9Fweb%E3%83%AC%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%87%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E9%96%8B%E7%99%BA/</link>
      <pubDate>Thu, 22 Oct 2020 16:09:01 +0900</pubDate>
      
      <guid>https://pop-ketle.github.io/survey/papers/%E3%83%99%E3%82%A4%E3%82%B8%E3%82%A2%E3%83%B3%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%82%92%E7%94%A8%E3%81%84%E3%81%9Fweb%E3%83%AC%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%87%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E9%96%8B%E7%99%BA/</guid>
      <description>ベイジアンネットワークを用いたWebレコメンデーションシステムの開発 https://www.jstage.jst.go.jp/article/pjsai/JSAI07/0/JSAI07_3H73/_article/-char/ja/ 山崎 敬広, ソンムァン ポクポン, 石山 洸, 高田 健一郎, 植野 真臣 第21回全国大会(2007)  何をしたの？ いわゆる実装してみた系。ベイジアンネットワークのアルゴリズムである、MWSTアルゴリズムと高速化のための工夫としてPearl’s Message Passingアルゴリズムを実装して、サイト内各ページの閲覧回数を変数として、各ページの閲覧確率の関係をデータから学習し、大規模なベイジアンネットワークを構築して評価した。
コントリビューション MWSTアルゴリズムの計算量が高々$ O(n^2) $な上、さらに高速にネットワーク上の全ノードの周辺事後確率を求める手法としてPearl’s Message Passingアルゴリズムを用いたので高速な動作が見込める。
ベイジアンネットワークについて アイシアちゃんの動画 【因果を利用した分析】ベイジアンネットワークで見る変数の因果関係【いろんな分析 vol. 5 】 #060 
因果をノード、依存関係を有効アークとして確率ネットワークを構築した、確率構造を表すDAG(Directed AcyclicGraph)と条件付確率パラメータ集合で表現される。
MWSTアルゴリズム 各変数間の相互情報量を基準として木を構築する手法
実行ステップを論文より引用
  与えられたデータより，$N(N−1)/2$個の枝について，すべての枝の相互情報量$I(x_i;x_j)$を求める． もっとも大きな相互情報量を示す枝を取り出し，木を構成する枝とする． 次に大きな相互情報量を示す枝を木に加えるが，ループが出来るならその枝を捨てる． ステップ3を$N-1$個の枝が木に加わるまで繰り返す． 最後に根ノードを決定し，根から葉へ向かうように枝に方向を付ける．   要するに相互情報量が最大化するようにループのない木を作成した後に、それを有向グラフに変換する。
メリット  二次統計量までしか用いないため，データからの演算が容易で信頼できる 計算量がノード数nに対して高々O(n2)   Pearl’s Message Passingアルゴリズム ベイジアンネットワークでは、ネットワークを構築した後や、ノードにデータを与えた時、あるノードの事後確率を求めるのに，周辺化を行う必要がある。この周辺化について、ネットワーク構造を利用して効率的に計算するアルゴリズム。
実行ステップを論文より引用
  証拠データを与えられたノードから，その周辺ノードへ向けてメッセージの送信を行う． メッセージを受信したノードは，受信したメッセージを用いて，自分の周辺事後確率を更新する． 周辺事後確率を更新したノードは，メッセージの送信元以外の自分の周辺ノードにメッセージを送信する． 2,3を繰り返し，全てのノードの周辺事後確率を更新する．   あんまり具体的にどうするのか書いてない気がするが、新しくデータが加えられたノードから伝搬する形で事後確率を更新していくんだと思う。
メリット 高速かつ厳密に，全ノードの周辺事後確率を求めることが出来る
デメリット ループがあると使えない、MWSTアルゴリズムではループが生まれない(というかループを持たないものがベイジアンネットワークなのでは？)</description>
    </item>
    
  </channel>
</rss>
